{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fluidize","text":""},{"location":"#about","title":"About","text":"<p>fluidize-python is a library for building modular, reproducible scientific computing pipelines. It provides a unified interface to a wide range of physical simulation tools, eliminating the need to navigate the inconsistent, incomplete instructions that often vary from tool to tool.</p> <p>This library marks our first step toward AI-orchestrated scientific computing. By standardizing tools and practices within our framework, AI agents can automatically build, configure, and execute computational pipelines across domains and simulation platforms.</p> <p>Our goal is to improve today\u2019s simulation tools so AI can assist researchers and scientists in accelerating the pace of innovation and scientific discovery.</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#prerequesites","title":"Prerequesites:","text":"<ul> <li>Python 3.9+</li> <li>Docker Desktop (for local execution). Download and install Docker Desktop from https://docs.docker.com/desktop/.</li> </ul> <p>After installation, verify with:   <code>bash   docker --version</code></p>"},{"location":"#from-pypi","title":"From PyPI","text":"<pre><code>pip install fluidize\n</code></pre>"},{"location":"#from-source","title":"From Source","text":"<pre><code>git clone https://github.com/Fluidize-Inc/fluidize-python.git\ncd fluidize-python\nmake install\n</code></pre>"},{"location":"#run-examples","title":"Run Examples","text":"<p>Example projects are located in this folder: examples/. There you can find an Jupyter Notebook of a simple simulation</p>"},{"location":"#architecture","title":"Architecture","text":"<p>At Fluidize, we believe strong organization leads to better reproducibility and scalability.</p> <p>We treat each simulation pipeline as an individual project. Within projects, each pipeline is treated as a DAG (directed acyclic graph), where nodes represent individual pieces of scientific software (e.g. inputs, solvers, visualization tools, etc.) and edges represent data flow between nodes.</p>"},{"location":"#nodes","title":"Nodes","text":"<p>Nodes are the foundational building blocks of simulation pipelines. Each node represents a computational unit with:</p> File Purpose <code>properties.yaml</code> Container configuration, working directory, and output paths <code>metadata.yaml</code> Node description, version, authors, and repository URL <code>Dockerfile</code> Environment setup and dependency installation <code>parameters.json</code> Tunable parameters for experiments <code>main.sh</code> Execution script for the source code <code>source/</code> Original scientific computing code <p>Key Features:  - Predictable input/output paths  - Modular and extensible design  - No source code modification required  - Automated node generation support (Public launch soon)</p>"},{"location":"#projects","title":"Projects","text":"<p>Projects store a simple data layer for managing individual modules within a pipeline.</p> File Purpose <code>graph.json</code> Node (scientific software) and edge (data flow) definitions <code>metadata.yaml</code> Project description and configuration"},{"location":"#runs","title":"Runs","text":"<p>Pipelines can be executed both locally and on the cloud. Local execution is handled by Docker engine. Cloud execution is routed through our API, and uses the Kubernetes engine with Argo Workflow Manager.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>We would love to collaborate with you! Please see our Contributing Guide for details.</p> <p>Also - we would love to help streamline your pipeline! Please reach out to us at founders@fluidize.ai.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"core-modules/","title":"Core Modules","text":"<p>The Fluidize library is composed of a set of core modules that provide a high-level interface for managing Fluidize resources. These modules are designed to be used together to build and execute scientific computing pipelines.</p>"},{"location":"core-modules/#client","title":"Client","text":"<p>The Fluidize Client provides a unified, high-level interface for managing Fluidize resources in both local and cloud API modes. It serves as the primary entry point for creating and running pipelines across these environments.</p>"},{"location":"core-modules/#projects","title":"Projects","text":"<p>The Projects module provides tools for managing project lifecycles:</p> <ul> <li> <p>Registry Manager:   Handles the user\u2019s complete project registry, with functionality to create, edit, and delete projects.</p> </li> <li> <p>Project Manager:   Focuses on individual projects, managing the project graph, nodes, and runs, and supporting execution of project-specific workflows.</p> </li> </ul>"},{"location":"core-modules/#graph","title":"Graph","text":"<p>The Graph module provides tools for managing the project graph, which is a representation of the simulation pipeline.</p> <p>In a Fluidize project, pipelines are represented as a directed acyclic graph (DAG) where each node represents a module simulation and each edge represents the flow of data between nodes:</p> <ul> <li> <p>Graph Manager:   Manages the project graph, and provides high level functionality to create, edit, and delete nodes and edges.</p> </li> <li> <p>Graph Processor:   Manages specific operations on the graph data structure within the local filesystem.</p> </li> </ul>"},{"location":"core-modules/#node","title":"Node","text":"<p>The Node module provides tools for managing the metadata, properties, and parameters of individual nodes within a project.</p>"},{"location":"core-modules/#run","title":"Run","text":"<p>The Run module provides tools for managing simulation pipeline runs within a project:</p> <ul> <li> <p>Runs Manager:   Manages the high level execution of runs and retrieving run status.</p> </li> <li> <p>Project Runner:   Manages the specific execution details of a project pipeline, including environment preparation and node execution order.</p> </li> </ul>"},{"location":"core-modules/client/","title":"Client Module","text":"<p>The Fluidize Client is the primary interface to create and edit projects. There are two interfaces for this, with more on the way.</p> <ul> <li> <p>Local Mode: Works with your local device, uses Docker to sequentially execute nodes.</p> </li> <li> <p>API Mode: Runs on Fluidize API to manage projects and workflows in the cloud.</p> </li> </ul>"},{"location":"core-modules/client/#fluidize.client.FluidizeClient","title":"<code>FluidizeClient(mode: Literal['local', 'api', 'auto'] = 'auto', base_path: Optional[Path] = None)</code>","text":"<p>High-level client for interacting with Fluidize.</p> <p>This client provides an intuitive interface for managing projects, nodes, and running simulation flows. It supports two modes:</p> <ul> <li>API mode: Connects to the Fluidize cloud API</li> <li>Local mode: Works with local Fluidize engine installation</li> </ul> <p>Configuration is handled automatically through environment variables and the FluidizeConfig class.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>Literal['local', 'api', 'auto']</code> <p>Operation mode - \"local\", \"api\", or \"auto\" for environment detection</p> <code>'auto'</code> <code>base_path</code> <code>Optional[Path]</code> <p>Optional custom base path for local mode. If None, uses ~/.fluidize  Config will handle all other settings via environment variables</p> <code>None</code>"},{"location":"core-modules/client/#fluidize.client.FluidizeClient.mode","title":"<code>mode: str</code>  <code>property</code>","text":"<p>Get the current operation mode.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The current operation mode</p>"},{"location":"core-modules/client/#fluidize.client.FluidizeClient.projects","title":"<code>projects = RegistryManager(self._adapter)</code>  <code>instance-attribute</code>","text":""},{"location":"core-modules/client/#fluidize.config.FluidizeConfig","title":"<code>FluidizeConfig(mode: Literal['local', 'api', 'auto'] = 'auto', base_path: Optional[Path] = None)</code>","text":"<p>Lightweight configuration for fluidize library.</p> <p>Handles mode switching between local and API operations, and manages paths and settings for both modes.</p> <p>Initialize configuration with specified mode.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>Literal['local', 'api', 'auto']</code> <p>Operation mode - \"local\", \"api\", or \"auto\" for environment detection</p> <code>'auto'</code> <code>base_path</code> <code>Optional[Path]</code> <p>Optional custom base path for local mode. If None, uses ~/.fluidize</p> <code>None</code>"},{"location":"core-modules/client/#fluidize.config.FluidizeConfig.is_local_mode","title":"<code>is_local_mode() -&gt; bool</code>","text":"<p>Check if running in local mode.</p>"},{"location":"core-modules/client/#fluidize.config.FluidizeConfig.is_api_mode","title":"<code>is_api_mode() -&gt; bool</code>","text":"<p>Check if running in API mode.</p>"},{"location":"core-modules/graph/","title":"Graph Module","text":""},{"location":"core-modules/graph/#graph-manager","title":"Graph Manager","text":""},{"location":"core-modules/graph/#fluidize.managers.graph.GraphManager","title":"<code>GraphManager(adapter: Any, project: ProjectSummary)</code>","text":"<p>Graph manager for a specific project.</p> <p>Provides graph operations like adding nodes/edges without requiring project context on each method call.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>Any</code> <p>adapter (FluidizeSDK or LocalAdapter)</p> required <code>project</code> <code>ProjectSummary</code> <p>The project this graph manager is bound to</p> required"},{"location":"core-modules/graph/#fluidize.managers.graph.GraphManager.get","title":"<code>get() -&gt; GraphData</code>","text":"<p>Get the complete graph for this project.</p> <p>Returns:</p> Type Description <code>GraphData</code> <p>GraphData containing all nodes and edges for this project</p>"},{"location":"core-modules/graph/#fluidize.managers.graph.GraphManager.add_node","title":"<code>add_node(node: GraphNode, sim_global: bool = True) -&gt; NodeManager</code>","text":"<p>Add a new node to this project's graph.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>GraphNode</code> <p>The node to insert</p> required <code>sim_global</code> <code>bool</code> <p>Whether to use global simulations (placeholder for future)</p> <code>True</code> <p>Returns:</p> Type Description <code>NodeManager</code> <p>The added node</p>"},{"location":"core-modules/graph/#fluidize.managers.graph.GraphManager.update_node_position","title":"<code>update_node_position(node: GraphNode) -&gt; GraphNode</code>","text":"<p>Update a node's position in this project's graph.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>GraphNode</code> <p>The node with updated position</p> required <p>Returns:</p> Type Description <code>GraphNode</code> <p>The updated node</p>"},{"location":"core-modules/graph/#fluidize.managers.graph.GraphManager.delete_node","title":"<code>delete_node(node_id: str) -&gt; None</code>","text":"<p>Delete a node from this project's graph.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>str</code> <p>ID of the node to delete</p> required"},{"location":"core-modules/graph/#fluidize.managers.graph.GraphManager.add_edge","title":"<code>add_edge(edge: GraphEdge) -&gt; GraphEdge</code>","text":"<p>Add or update an edge in this project's graph.</p> <p>Parameters:</p> Name Type Description Default <code>edge</code> <code>GraphEdge</code> <p>The edge to upsert</p> required <p>Returns:</p> Type Description <code>GraphEdge</code> <p>The upserted edge</p>"},{"location":"core-modules/graph/#fluidize.managers.graph.GraphManager.delete_edge","title":"<code>delete_edge(edge_id: str) -&gt; None</code>","text":"<p>Delete an edge from this project's graph.</p> <p>Parameters:</p> Name Type Description Default <code>edge_id</code> <code>str</code> <p>ID of the edge to delete</p> required"},{"location":"core-modules/graph/#graph-processor","title":"Graph Processor","text":""},{"location":"core-modules/graph/#fluidize.core.modules.graph.GraphProcessor","title":"<code>GraphProcessor(project: ProjectSummary)</code>","text":"<p>Local filesystem-based graph processor.</p> <p>Handles all graph operations using the filesystem as the source of truth, compatible with the FastAPI interface but without cloud dependencies.</p> <p>Initialize the graph processor.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>ProjectSummary</code> <p>The project to operate on</p> required"},{"location":"core-modules/graph/#fluidize.core.modules.graph.GraphProcessor.get_graph","title":"<code>get_graph() -&gt; GraphData</code>","text":"<p>Gets the entire graph for the project from graph.json file.</p> <p>Returns:</p> Type Description <code>GraphData</code> <p>GraphData containing all nodes and edges</p>"},{"location":"core-modules/graph/#fluidize.core.modules.graph.GraphProcessor.insert_node","title":"<code>insert_node(node: GraphNode, sim_global: bool = True) -&gt; GraphNode</code>","text":"<p>Inserts a node from the list of simulations or creates a new one.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>GraphNode</code> <p>The node to insert</p> required <code>sim_global</code> <code>bool</code> <p>Whether to use global simulations</p> <code>True</code> <p>Returns:</p> Type Description <code>GraphNode</code> <p>The inserted node</p>"},{"location":"core-modules/graph/#fluidize.core.modules.graph.GraphProcessor.insert_node_from_scratch","title":"<code>insert_node_from_scratch(GraphNode: GraphNode, nodeProperties: nodeProperties_simulation, nodeMetadata: nodeMetadata_simulation, repo_link: Optional[str] = None) -&gt; GraphNode</code>","text":"<p>Inserts a new node into the graph from scratch, creating all necessary files and directories.</p> <p>Parameters:</p> Name Type Description Default <code>GraphNode</code> <code>GraphNode</code> <p>The graph node to insert</p> required <code>nodeProperties</code> <code>nodeProperties_simulation</code> <p>Properties configuration for the node</p> required <code>nodeMetadata</code> <code>nodeMetadata_simulation</code> <p>Metadata configuration for the node</p> required <code>repo_link</code> <code>Optional[str]</code> <p>Optional repository URL to clone into the source directory</p> <code>None</code> <p>Returns:</p> Type Description <code>GraphNode</code> <p>The inserted GraphNode</p>"},{"location":"core-modules/graph/#fluidize.core.modules.graph.GraphProcessor.update_node_position","title":"<code>update_node_position(node: GraphNode) -&gt; GraphNode</code>","text":"<p>Updates a node's position in the graph.json file.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>GraphNode</code> <p>The node with updated position</p> required <p>Returns:</p> Type Description <code>GraphNode</code> <p>The updated node</p>"},{"location":"core-modules/graph/#fluidize.core.modules.graph.GraphProcessor.delete_node","title":"<code>delete_node(node_id: str) -&gt; None</code>","text":"<p>Deletes a node from the graph and removes its directory.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>str</code> <p>ID of the node to delete</p> required"},{"location":"core-modules/graph/#fluidize.core.modules.graph.GraphProcessor.upsert_edge","title":"<code>upsert_edge(edge: GraphEdge) -&gt; GraphEdge</code>","text":"<p>Adds or updates an edge in the graph.json file.</p> <p>Parameters:</p> Name Type Description Default <code>edge</code> <code>GraphEdge</code> <p>The edge to upsert</p> required <p>Returns:</p> Type Description <code>GraphEdge</code> <p>The upserted edge</p>"},{"location":"core-modules/graph/#fluidize.core.modules.graph.GraphProcessor.delete_edge","title":"<code>delete_edge(edge_id: str) -&gt; None</code>","text":"<p>Deletes an edge from the graph.json file.</p> <p>Parameters:</p> Name Type Description Default <code>edge_id</code> <code>str</code> <p>ID of the edge to delete</p> required"},{"location":"core-modules/graph/#graph-types","title":"Graph Types","text":""},{"location":"core-modules/graph/#fluidize.core.types.graph.GraphData","title":"<code>GraphData</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A graph representation of a project in the <code>graph.json</code> file.</p> <p>Attributes:</p> Name Type Description <code>nodes</code> <code>list[GraphNode]</code> <p>List of nodes.</p> <code>edges</code> <code>list[GraphEdge]</code> <p>List of edges.</p>"},{"location":"core-modules/graph/#fluidize.core.types.graph.GraphNode","title":"<code>GraphNode</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A node in the graph.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Unique node ID.</p> <code>position</code> <code>Position</code> <p>Node position.</p> <code>data</code> <code>graphNodeData</code> <p>Extra metadata.</p> <code>type</code> <code>str</code> <p>Renderer/type key.</p>"},{"location":"core-modules/graph/#fluidize.core.types.graph.GraphEdge","title":"<code>GraphEdge</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>An edge in the graph.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>Unique edge ID.</p> <code>source</code> <code>str</code> <p>Source node ID.</p> <code>target</code> <code>str</code> <p>Target node ID.</p> <code>type</code> <code>str</code> <p>Renderer/type key.</p>"},{"location":"core-modules/node/","title":"Node Module","text":""},{"location":"core-modules/node/#fluidize.managers.node.NodeManager","title":"<code>NodeManager(adapter: Any, project: ProjectSummary, node_id: str)</code>","text":"<p>Node manager for a specific node within a project.</p> <p>Provides node-specific operations like editing parameters, metadata, and properties without requiring project and node context on each method call.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>Any</code> <p>adapter adapter (FluidizeSDK or Localadapter)</p> required <code>project</code> <code>ProjectSummary</code> <p>The project this node belongs to</p> required <code>node_id</code> <code>str</code> <p>The ID of the node this manager is bound to</p> required"},{"location":"core-modules/node/#fluidize.managers.node.NodeManager.id","title":"<code>id: str</code>  <code>property</code>","text":"<p>Get the node ID.</p> <p>Returns:</p> Type Description <code>str</code> <p>The ID of the node this manager is bound to</p>"},{"location":"core-modules/node/#fluidize.managers.node.NodeManager.data","title":"<code>data: Any</code>  <code>property</code>","text":"<p>Get the node's data.</p> <p>Returns:</p> Type Description <code>Any</code> <p>The data of the graph node</p>"},{"location":"core-modules/node/#fluidize.managers.node.NodeManager.get_node","title":"<code>get_node() -&gt; GraphNode</code>","text":"<p>Get the complete graph node data.</p> <p>Returns:</p> Type Description <code>GraphNode</code> <p>GraphNode containing the node data</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the node is not found in the project graph</p>"},{"location":"core-modules/node/#fluidize.managers.node.NodeManager.exists","title":"<code>exists() -&gt; bool</code>","text":"<p>Check if this node exists in the project graph.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the node exists, False otherwise</p>"},{"location":"core-modules/node/#fluidize.managers.node.NodeManager.delete","title":"<code>delete() -&gt; None</code>","text":"<p>Delete this node from the project graph and filesystem.</p>"},{"location":"core-modules/node/#fluidize.managers.node.NodeManager.update_position","title":"<code>update_position(x: float, y: float) -&gt; GraphNode</code>","text":"<p>Update the node's position in the graph.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>New x coordinate</p> required <code>y</code> <code>float</code> <p>New y coordinate</p> required <p>Returns:</p> Type Description <code>GraphNode</code> <p>The updated graph node</p>"},{"location":"core-modules/node/#fluidize.managers.node.NodeManager.get_metadata","title":"<code>get_metadata() -&gt; nodeMetadata_simulation</code>","text":"<p>Get the node's metadata from metadata.yaml.</p> <p>Returns:</p> Type Description <code>nodeMetadata_simulation</code> <p>The node's metadata</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If metadata file doesn't exist</p> <code>ValueError</code> <p>If metadata file is invalid</p>"},{"location":"core-modules/node/#fluidize.managers.node.NodeManager.update_metadata","title":"<code>update_metadata(**kwargs: Any) -&gt; nodeMetadata_simulation</code>","text":"<p>Update specific fields in the node's metadata.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Fields to update (e.g., name=\"New Name\", description=\"New desc\")</p> <code>{}</code> <p>Returns:</p> Type Description <code>nodeMetadata_simulation</code> <p>The updated metadata</p> <p>Raises:</p> Type Description <code>AttributeError</code> <p>If trying to update a field that doesn't exist</p>"},{"location":"core-modules/node/#fluidize.managers.node.NodeManager.save_metadata","title":"<code>save_metadata(metadata: nodeMetadata_simulation) -&gt; None</code>","text":"<p>Save metadata object to the node's metadata.yaml file.</p> <p>Parameters:</p> Name Type Description Default <code>metadata</code> <code>nodeMetadata_simulation</code> <p>The metadata object to save</p> required"},{"location":"core-modules/node/#fluidize.managers.node.NodeManager.get_properties","title":"<code>get_properties() -&gt; nodeProperties_simulation</code>","text":"<p>Get the node's properties from properties.yaml.</p> <p>Returns:</p> Type Description <code>nodeProperties_simulation</code> <p>The node's properties</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If properties file doesn't exist</p> <code>ValueError</code> <p>If properties file is invalid</p>"},{"location":"core-modules/node/#fluidize.managers.node.NodeManager.update_properties","title":"<code>update_properties(**kwargs: Any) -&gt; nodeProperties_simulation</code>","text":"<p>Update specific fields in the node's properties.</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <code>Any</code> <p>Fields to update (e.g., container_image=\"new:tag\", should_run=False)</p> <code>{}</code> <p>Returns:</p> Type Description <code>nodeProperties_simulation</code> <p>The updated properties</p> <p>Raises:</p> Type Description <code>AttributeError</code> <p>If trying to update a field that doesn't exist</p>"},{"location":"core-modules/node/#fluidize.managers.node.NodeManager.save_properties","title":"<code>save_properties(properties: nodeProperties_simulation) -&gt; None</code>","text":"<p>Save properties object to the node's properties.yaml file.</p> <p>Parameters:</p> Name Type Description Default <code>properties</code> <code>nodeProperties_simulation</code> <p>The properties object to save</p> required"},{"location":"core-modules/node/#fluidize.managers.node.NodeManager.get_parameters_model","title":"<code>get_parameters_model() -&gt; nodeParameters_simulation</code>","text":"<p>Get the node's parameters model from parameters.json.</p> <p>Returns:</p> Type Description <code>nodeParameters_simulation</code> <p>The node's parameters model</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If parameters file doesn't exist</p> <code>ValueError</code> <p>If parameters file is invalid</p>"},{"location":"core-modules/node/#fluidize.managers.node.NodeManager.get_parameters","title":"<code>get_parameters() -&gt; list[Parameter]</code>","text":"<p>Get the node's parameters list from parameters.json.</p> <p>Returns:</p> Type Description <code>list[Parameter]</code> <p>List of Parameter objects for the node</p>"},{"location":"core-modules/node/#fluidize.managers.node.NodeManager.get_parameter","title":"<code>get_parameter(name: str) -&gt; Optional[Parameter]</code>","text":"<p>Get a specific parameter by name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the parameter to retrieve</p> required <p>Returns:</p> Type Description <code>Optional[Parameter]</code> <p>The parameter if found, None otherwise</p>"},{"location":"core-modules/node/#fluidize.managers.node.NodeManager.update_parameter","title":"<code>update_parameter(parameter: Parameter) -&gt; Parameter</code>","text":"<p>Update or add a parameter.</p> <p>Parameters:</p> Name Type Description Default <code>parameter</code> <code>Parameter</code> <p>The parameter to update/add</p> required <p>Returns:</p> Type Description <code>Parameter</code> <p>The updated parameter</p>"},{"location":"core-modules/node/#fluidize.managers.node.NodeManager.set_parameters","title":"<code>set_parameters(parameters: list[Parameter]) -&gt; list[Parameter]</code>","text":"<p>Replace all parameters with the provided list.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>list[Parameter]</code> <p>List of parameters to set</p> required <p>Returns:</p> Type Description <code>list[Parameter]</code> <p>The list of parameters that were set</p>"},{"location":"core-modules/node/#fluidize.managers.node.NodeManager.remove_parameter","title":"<code>remove_parameter(name: str) -&gt; bool</code>","text":"<p>Remove a parameter by name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the parameter to remove</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if parameter was removed, False if it didn't exist</p>"},{"location":"core-modules/node/#fluidize.managers.node.NodeManager.show_parameters","title":"<code>show_parameters() -&gt; str</code>","text":"<p>Get a formatted string display of all parameters.</p> <p>Returns:</p> Type Description <code>str</code> <p>A formatted string displaying the parameters</p>"},{"location":"core-modules/node/#fluidize.managers.node.NodeManager.get_node_directory","title":"<code>get_node_directory() -&gt; UPath</code>","text":"<p>Get the filesystem path to this node's directory.</p> <p>Returns:</p> Type Description <code>UPath</code> <p>Path to the node's directory</p>"},{"location":"core-modules/node/#fluidize.managers.node.NodeManager.get_metadata_path","title":"<code>get_metadata_path() -&gt; UPath</code>","text":"<p>Get the filesystem path to this node's metadata.yaml file.</p> <p>Returns:</p> Type Description <code>UPath</code> <p>Path to the metadata file</p>"},{"location":"core-modules/node/#fluidize.managers.node.NodeManager.get_properties_path","title":"<code>get_properties_path() -&gt; UPath</code>","text":"<p>Get the filesystem path to this node's properties.yaml file.</p> <p>Returns:</p> Type Description <code>UPath</code> <p>Path to the properties file</p>"},{"location":"core-modules/node/#fluidize.managers.node.NodeManager.get_parameters_path","title":"<code>get_parameters_path() -&gt; UPath</code>","text":"<p>Get the filesystem path to this node's parameters.json file.</p> <p>Returns:</p> Type Description <code>UPath</code> <p>Path to the parameters file</p>"},{"location":"core-modules/node/#fluidize.managers.node.NodeManager.validate","title":"<code>validate() -&gt; dict[str, Any]</code>","text":"<p>Validate the node's files and structure.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary containing validation results with keys:</p> <code>dict[str, Any]</code> <ul> <li>'valid': bool indicating if node is valid</li> </ul> <code>dict[str, Any]</code> <ul> <li>'graph_node_exists': bool</li> </ul> <code>dict[str, Any]</code> <ul> <li>'metadata_exists': bool</li> </ul> <code>dict[str, Any]</code> <ul> <li>'properties_exists': bool</li> </ul> <code>dict[str, Any]</code> <ul> <li>'parameters_exists': bool</li> </ul> <code>dict[str, Any]</code> <ul> <li>'errors': list of error messages</li> </ul>"},{"location":"core-modules/node/#fluidize.managers.node.NodeManager.to_dict","title":"<code>to_dict() -&gt; dict[str, Any]</code>","text":"<p>Convert the complete node information to a dictionary.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary containing node graph data, metadata, properties, and parameters</p>"},{"location":"core-modules/projects/","title":"Projects Module","text":""},{"location":"core-modules/projects/#registry","title":"Registry","text":""},{"location":"core-modules/projects/#fluidize.managers.registry.RegistryManager","title":"<code>RegistryManager(adapter: Any)</code>","text":"<p>Registry manager for project CRUD operations.</p> <p>Provides methods to create, retrieve, update, and list projects. All methods return Project entities that give access to project-scoped operations.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>Any</code> <p>adapter (FluidizeSDK or LocalAdapter)</p> required"},{"location":"core-modules/projects/#fluidize.managers.registry.RegistryManager.create","title":"<code>create(project_id: str, label: str = '', description: str = '', location: str = '', status: str = '') -&gt; ProjectManager</code>","text":"<p>Create a new project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Unique identifier for the project</p> required <code>label</code> <code>str</code> <p>Display label for the project</p> <code>''</code> <code>description</code> <code>str</code> <p>Project description</p> <code>''</code> <code>location</code> <code>str</code> <p>Project location</p> <code>''</code> <code>status</code> <code>str</code> <p>Project status</p> <code>''</code> <p>Returns:</p> Type Description <code>ProjectManager</code> <p>Created project wrapped in Project class</p> <p>Raises:</p> Type Description <code>ProjectAlreadyExistsError</code> <p>If a project with the same ID already exists</p>"},{"location":"core-modules/projects/#fluidize.managers.registry.RegistryManager.get","title":"<code>get(project_id: str) -&gt; ProjectManager</code>","text":"<p>Get a project by ID.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>The project ID</p> required <p>Returns:</p> Type Description <code>ProjectManager</code> <p>Project wrapped in Project class</p>"},{"location":"core-modules/projects/#fluidize.managers.registry.RegistryManager.list","title":"<code>list() -&gt; list[ProjectManager]</code>","text":"<p>List all projects.</p> <p>Returns:</p> Type Description <code>list[ProjectManager]</code> <p>List of projects wrapped in Project class</p>"},{"location":"core-modules/projects/#fluidize.managers.registry.RegistryManager.update","title":"<code>update(project_id: str, label: Optional[str] = None, description: Optional[str] = None, location: Optional[str] = None, status: Optional[str] = None) -&gt; ProjectManager</code>","text":"<p>Update an existing project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>The project ID to update</p> required <code>label</code> <code>Optional[str]</code> <p>New label</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>New description</p> <code>None</code> <code>location</code> <code>Optional[str]</code> <p>New location</p> <code>None</code> <code>status</code> <code>Optional[str]</code> <p>New status</p> <code>None</code> <p>Returns:</p> Type Description <code>ProjectManager</code> <p>Updated project wrapped in Project class</p>"},{"location":"core-modules/projects/#project","title":"Project","text":""},{"location":"core-modules/projects/#fluidize.managers.project.ProjectManager","title":"<code>ProjectManager(adapter: Any, project_summary: ProjectSummary)</code>","text":"<p>Project manager that wraps project data and provides access to scoped managers.</p> <p>Provides convenient access to graph and runs operations for this specific project.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>Any</code> <p>adapter (FluidizeSDK or LocalAdapter)</p> required <code>project_summary</code> <code>ProjectSummary</code> <p>The underlying project data</p> required"},{"location":"core-modules/projects/#fluidize.managers.project.ProjectManager.graph","title":"<code>graph: GraphManager</code>  <code>property</code>","text":"<p>Get the graph manager for this project.</p> <p>Returns:</p> Type Description <code>GraphManager</code> <p>GraphManager manager scoped to this project</p>"},{"location":"core-modules/projects/#fluidize.managers.project.ProjectManager.runs","title":"<code>runs: RunsManager</code>  <code>property</code>","text":"<p>Get the runs manager for this project.</p> <p>Returns:</p> Type Description <code>RunsManager</code> <p>ProjectRuns manager scoped to this project</p>"},{"location":"core-modules/projects/#fluidize.managers.project.ProjectManager.id","title":"<code>id: str</code>  <code>property</code>","text":"<p>Get project ID.</p> <p>Returns:</p> Type Description <code>str</code> <p>The project ID</p>"},{"location":"core-modules/projects/#fluidize.managers.project.ProjectManager.label","title":"<code>label: Optional[str]</code>  <code>property</code>","text":"<p>Get project label.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The project label</p>"},{"location":"core-modules/projects/#fluidize.managers.project.ProjectManager.description","title":"<code>description: Optional[str]</code>  <code>property</code>","text":"<p>Get project description.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The project description</p>"},{"location":"core-modules/projects/#fluidize.managers.project.ProjectManager.location","title":"<code>location: Optional[str]</code>  <code>property</code>","text":"<p>Get project location.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The project location</p>"},{"location":"core-modules/projects/#fluidize.managers.project.ProjectManager.status","title":"<code>status: Optional[str]</code>  <code>property</code>","text":"<p>Get project status.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The project status</p>"},{"location":"core-modules/projects/#fluidize.managers.project.ProjectManager.metadata_version","title":"<code>metadata_version: str</code>  <code>property</code>","text":"<p>Get project metadata version.</p> <p>Returns:</p> Type Description <code>str</code> <p>The project metadata version</p>"},{"location":"core-modules/projects/#fluidize.managers.project.ProjectManager.created_at","title":"<code>created_at: Optional[str]</code>  <code>property</code>","text":"<p>Get project creation timestamp.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The project creation timestamp</p>"},{"location":"core-modules/projects/#fluidize.managers.project.ProjectManager.updated_at","title":"<code>updated_at: Optional[str]</code>  <code>property</code>","text":"<p>Get project update timestamp.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The project update timestamp</p>"},{"location":"core-modules/projects/#fluidize.managers.project.ProjectManager.to_dict","title":"<code>to_dict() -&gt; dict[str, Any]</code>","text":"<p>Convert project to dictionary representation.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary representation of the project</p>"},{"location":"core-modules/run/","title":"Run Module","text":""},{"location":"core-modules/run/#run-management","title":"Run Management","text":""},{"location":"core-modules/run/#fluidize.managers.runs.RunsManager","title":"<code>RunsManager(adapter: Any, project: ProjectSummary)</code>","text":"<p>Runs manager for a specific project.</p> <p>Provides run operations like executing workflows without requiring project context on each method call.</p> <p>Parameters:</p> Name Type Description Default <code>adapter</code> <code>Any</code> <p>adapter (FluidizeSDK or LocalAdapter)</p> required <code>project</code> <code>ProjectSummary</code> <p>The project this runs manager is bound to</p> required"},{"location":"core-modules/run/#fluidize.managers.runs.RunsManager.run_flow","title":"<code>run_flow(payload: RunFlowPayload) -&gt; dict[str, Any]</code>","text":"<p>Execute a flow run for this project.</p> <p>Parameters:</p> Name Type Description Default <code>payload</code> <code>RunFlowPayload</code> <p>Run configuration (name, description, tags)</p> required <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>Dictionary with flow_status and run_number</p>"},{"location":"core-modules/run/#run-execution","title":"Run Execution","text":""},{"location":"core-modules/run/#fluidize.core.modules.run.RunJob","title":"<code>RunJob</code>","text":"<p>A job that runs for a single node.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>ProjectSummary</code> <p>The project this node belongs to</p> required <code>strategyClass</code> <code>type[BaseExecutionStrategy]</code> <p>The strategy class to use for execution</p> required <code>nodeProperties_simulation</code> <code>nodeProperties_simulation</code> <p>The node properties to run</p> required <code>prev_nodeProperties_simulation</code> <code>Optional[nodeProperties_simulation]</code> <p>The previous node properties (optional)</p> <code>None</code> <code>mlflow_tracker</code> <code>Optional[MLFlowTracker]</code> <p>The MLflow tracker (optional)</p> <code>None</code> <code>run_id</code> <code>Optional[str]</code> <p>The run ID (optional)</p> <code>None</code> <code>run_metadata</code> <code>Optional[object]</code> <p>The run metadata (optional)</p> <code>None</code>"},{"location":"core-modules/run/#fluidize.core.modules.run.project.ProjectRunner","title":"<code>ProjectRunner(project: ProjectSummary)</code>","text":"<p>Project runner that delegates to registered implementation based on mode.</p> <p>Follows the same pattern as DataLoader - uses get_handler() to get the appropriate implementation (local, cloud, etc.)</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>ProjectSummary</code> <p>ProjectSummary</p> required"},{"location":"core-modules/run/#fluidize.core.modules.run.project.ProjectRunner.prepare_run_environment","title":"<code>prepare_run_environment(metadata: RunFlowPayload) -&gt; int</code>","text":"<p>Create a new run folder for the project.</p> <p>Parameters:</p> Name Type Description Default <code>metadata</code> <code>RunFlowPayload</code> <p>RunFlowPayload</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Run number</p>"},{"location":"core-modules/run/#fluidize.core.modules.run.project.ProjectRunner.execute_node","title":"<code>execute_node(node_id: str, prev_node_id: Optional[str] = None, **kwargs: Any) -&gt; dict[str, Any]</code>  <code>async</code>","text":"<p>Execute a single node within the project run.</p> <p>Parameters:</p> Name Type Description Default <code>node_id</code> <code>str</code> <p>Node ID</p> required <code>prev_node_id</code> <code>Optional[str]</code> <p>Previous node ID</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict[str, Any]: Execution result</p>"},{"location":"core-modules/run/#fluidize.core.modules.run.project.ProjectRunner.execute_flow","title":"<code>execute_flow(nodes_to_run: list[str], prev_nodes: list[str], **kwargs: Any) -&gt; list[dict[str, Any]]</code>  <code>async</code>","text":"<p>Execute a flow of nodes in order.</p> <p>Parameters:</p> Name Type Description Default <code>nodes_to_run</code> <code>list[str]</code> <p>List of node IDs</p> required <code>prev_nodes</code> <code>list[str]</code> <p>List of previous node IDs</p> required <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[dict[str, Any]]</code> <p>list[dict[str, Any]]: Execution results for all nodes</p>"},{"location":"getting-started/examples/","title":"Examples","text":"<p>Examples coming soon...</p>"},{"location":"getting-started/quickstart/","title":"Getting Started","text":""}]}